(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{428:function(t,s,a){"use strict";a.r(s);var n=a(62),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_1-typesctipt起步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-typesctipt起步"}},[t._v("#")]),t._v(" 1.TypeSctipt起步")]),t._v(" "),a("h2",{attrs:{id:"_1-1-typescript介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-typescript介绍"}},[t._v("#")]),t._v(" 1.1 TypeScript介绍")]),t._v(" "),a("p",[t._v("TypeScript是由微软开发的语言，它是添加了"),a("strong",[t._v("类型系统")]),t._v("的JavaScript，并且适用于"),a("strong",[t._v("任何规模")]),t._v("的项目，它是JavaScript的"),a("strong",[t._v("超集")]),t._v("。\n​")]),t._v(" "),a("h2",{attrs:{id:"_1-2-typescript的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-typescript的特性"}},[t._v("#")]),t._v(" 1.2 TypeScript的特性")]),t._v(" "),a("p",[t._v("TypeScript最大的特性便是名字中还有的type"),a("strong",[t._v("类型")]),t._v("。它很大程度上弥补了现有JavaScript的缺点。\n​")]),t._v(" "),a("p",[t._v("对于JavScript而言")]),t._v(" "),a("ul",[a("li",[t._v("声明的变量初始化为字符串，后面可以赋值为数字等其他类型。")]),t._v(" "),a("li",[t._v("由于隐式转换的存在，在运行前很难确定变量的类型。")]),t._v(" "),a("li",[t._v("基于原型的面向对象编程，导致原型上的属性和方法可以在运行时被修改。")]),t._v(" "),a("li",[t._v("函数是"),a("strong",[t._v("一等公民")]),t._v("，它既可以赋值给变量，也可以作为参数和返回值。")])]),t._v(" "),a("p",[t._v("​")]),t._v(" "),a("p",[t._v("双刃剑：JavaScript由于其灵活性，以致无所不能，使用率极高，同时代码参差不起，运行报错，维护困难。")]),t._v(" "),a("p",[t._v("两个类型：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("静态类型")]),t._v("：在编译时进行类型检查。TypeScript在运行前会先编译为JavaScript，进行检查。")]),t._v(" "),a("li",[a("strong",[t._v("弱类型")]),t._v("：运行进行隐式类型转换。TypeScript完全兼容JavaScript，不会修改它的特性。")])]),t._v(" "),a("blockquote",[a("p",[t._v("动态类型是指在运行时进行类型检查，JavaScript就是动态类型，因为它是解释型语言，没有编译过程。")])]),t._v(" "),a("blockquote",[a("p",[t._v("强弱类型是相对的，python是强类型，运行时有的运算需要强制类型转换否则会报错，但整数和浮点数相加时会将整数隐式转换为浮点数。")])]),t._v(" "),a("p",[t._v("​")]),t._v(" "),a("p",[t._v("设计理念：在完整保留JavaScript运行时行为的基础上，通过引入静态类型系统来提高代码可维护性，减少BUG。\n​")]),t._v(" "),a("p",[t._v("类型推论：有时候不用手动声明变量的类型，也能在初始化时自动推论出它的类型。")]),t._v(" "),a("div",{staticClass:"language-typescript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两句代码一样")]),t._v("\n\nfoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Property 'split' does not exist on type 'number'.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译时会报错（数字没有 split 方法），无法通过编译")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("​")]),t._v(" "),a("p",[t._v("适用于任何规模：")]),t._v(" "),a("ul",[a("li",[t._v("类型系统为大型项目提高代码的可维护性，减少BUG。")]),t._v(" "),a("li",[t._v("中小型项目因为有类型推论的存在，并不会写太多额外的代码。")]),t._v(" "),a("li",[t._v("增强编辑器的各种功能，开发效率提高，且与JavaScript共存。")])]),t._v(" "),a("blockquote",[a("p",[t._v("在用VS Code编写JavaScript时，代码补全、接口提示等功能是通过 TypeScript Language Serice实现的。")])]),t._v(" "),a("p",[t._v("​")]),t._v(" "),a("p",[t._v("TypeScrit与ECMAScript标准同步发展，最新标准的语法它也同样可用。\n​")]),t._v(" "),a("h2",{attrs:{id:"_1-3-typescript尝试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-typescript尝试"}},[t._v("#")]),t._v(" 1.3 TypeScript尝试")]),t._v(" "),a("p",[t._v("在TypeScript中使用"),a("code",[t._v(":")]),t._v("来指定变量的类型。")]),t._v(" "),a("div",{staticClass:"language-typescript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello, '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tom'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("执行"),a("code",[t._v("tec 文件名.ts")]),t._v("编译为js文件。\n​")]),t._v(" "),a("p",[t._v("注意："),a("strong",[t._v("TypeScript只有在编译时才会对类型进行静态检查")]),t._v("，错误也会在编译时出现，运行时不会检查。\n想要保证运行时不报错的话，需要手动添加类型判断。\n​")]),t._v(" "),a("p",[t._v("TypeScript编译的时候如果报错了，仍会生成编译结果文件。可以通过tsconfig.json中配置noEmitOnError。\n​")])])}),[],!1,null,null,null);s.default=r.exports}}]);